[gd_scene load_steps=12 format=3 uid="uid://bxyawhvec441g"]

[ext_resource type="Texture2D" uid="uid://7w7ik7s10duj" path="res://textures/character/raft.png" id="2_5cfyv"]
[ext_resource type="PackedScene" uid="uid://c3sfgsk8jsm4m" path="res://scenes/UI.tscn" id="2_v3s7a"]

[sub_resource type="GDScript" id="GDScript_y5rpv"]
script/source = "extends CharacterBody2D

var health := 100.0
var direction := 0.0
var speed := 0.0

var ang_accel :=.008
var turn_max :=.025
var accel := 600.0
var speed_max := 500.0
var speed_reverse_max := 200.0

var experience = 0
var experience_level = 1
var collected_experience = 0

@onready var expbar = get_node(\"%ExperienceBar\")
@onready var lbllevel = get_node(\"%Level\")

func _ready():
	set_expbar(experience, calculate_experiencecap())

signal health_depleted

func _physics_process(delta):
	#SPEED INPUT
	if Input.is_action_pressed(\"MoveUp\"):
		speed += accel*delta
	elif Input.is_action_pressed(\"MoveDown\"):
		speed -= accel*delta
	elif speed < 0:
		speed += accel*delta
		if speed >0:
			speed = 0
	elif speed > 0:
		speed -= accel*delta
		if speed < 0:
			speed = 0
	#SPEED CLAMP
	if speed > speed_max:
		speed = speed_max
	elif speed < -speed_reverse_max:
		speed = -speed_reverse_max
	var dir_input := 0.0
	if Input.is_action_pressed(\"MoveLeft\"):
		dir_input = -1
	if Input.is_action_pressed(\"MoveRight\"):
		dir_input += 1
	
	direction +=clampf(speed*dir_input*delta*ang_accel,-turn_max,turn_max)
	
	velocity = Vector2.from_angle(direction)*speed
	move_and_slide()
	if velocity.length() != 0:
		if speed >0:
			%Raft.rotation = velocity.angle() - (PI/2)
		else:
			%Raft.rotation = velocity.angle() + (PI/2)

	const DAMAGE_RATE = 5.0
	var overlapping_mobs = %HurtBox.get_overlapping_bodies()
	if overlapping_mobs.size() > 0:
		health -= DAMAGE_RATE * overlapping_mobs.size() * delta
		%HealthBar.value = health
		if health <= 0.0:
			health_depleted.emit()

func _on_grab_area_area_entered(area):
	if area.is_in_group(\"loot\"):
		area.target = self

func _on_collect_area_area_entered(area):
	if area.is_in_group(\"loot\"):
		var gem_exp = area.collect()
		calculate_experience(gem_exp)
		
func calculate_experience(gem_exp):
	var exp_required = calculate_experiencecap()
	collected_experience += gem_exp
	if experience + collected_experience >= exp_required:
		collected_experience -= exp_required-experience
		experience_level += 1
		print(\"Level:\", experience_level)
		experience = 0 
		exp_required = calculate_experiencecap()
		calculate_experience(0)
	else:
		experience += collected_experience
		collected_experience = 0
	
	set_expbar(experience,exp_required)

func calculate_experiencecap():
	var exp_cap = experience_level
	if experience_level < 20:
		exp_cap = experience_level * 5
	elif experience_level < 40:
		exp_cap = 95 * (experience_level-19)*8
	else:
		exp_cap = 255 + (experience_level-39)*12
	return exp_cap

func set_expbar(set_value = 1, set_max_value = 100):
	expbar.value = set_value
	expbar.max_value = set_max_value

"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_qif0j"]
size = Vector2(128, 96)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_oxy0i"]
bg_color = Color(0.890068, 0.0827498, 0.167205, 1)
corner_radius_top_left = 8
corner_radius_top_right = 8
corner_radius_bottom_right = 8
corner_radius_bottom_left = 8

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_1pols"]
bg_color = Color(0, 0.727768, 0.0893875, 1)
corner_radius_top_left = 8
corner_radius_top_right = 8
corner_radius_bottom_right = 8
corner_radius_bottom_left = 8

[sub_resource type="RectangleShape2D" id="RectangleShape2D_erl5d"]
size = Vector2(130, 98)

[sub_resource type="CircleShape2D" id="CircleShape2D_sqksh"]
radius = 279.088

[sub_resource type="CircleShape2D" id="CircleShape2D_b0o1a"]
radius = 45.0444

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_7o18k"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_jf04g"]
bg_color = Color(0.983933, 0.16821, 0.827631, 1)

[node name="Player" type="CharacterBody2D"]
motion_mode = 1
script = SubResource("GDScript_y5rpv")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_qif0j")

[node name="Raft" type="Sprite2D" parent="."]
unique_name_in_owner = true
z_index = -2
position = Vector2(-7.63326e-06, 0.0883865)
rotation = 1.5708
scale = Vector2(0.998619, 1)
texture = ExtResource("2_5cfyv")

[node name="HealthBar" type="ProgressBar" parent="."]
unique_name_in_owner = true
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -57.5
offset_top = -106.0
offset_right = 57.5
offset_bottom = -79.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/background = SubResource("StyleBoxFlat_oxy0i")
theme_override_styles/fill = SubResource("StyleBoxFlat_1pols")
step = 1.0
value = 100.0
show_percentage = false
metadata/_edit_use_anchors_ = true

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(0.5, 0.5)

[node name="HurtBox" type="Area2D" parent="."]
unique_name_in_owner = true
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="HurtBox"]
z_index = 5
shape = SubResource("RectangleShape2D_erl5d")
debug_color = Color(0.890196, 0, 0.121569, 0.313726)

[node name="GrabArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="GrabArea"]
shape = SubResource("CircleShape2D_sqksh")

[node name="CollectArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="CollectArea"]
shape = SubResource("CircleShape2D_b0o1a")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Control" parent="CanvasLayer" instance=ExtResource("2_v3s7a")]

[node name="ExperienceBar" type="ProgressBar" parent="CanvasLayer/Control"]
unique_name_in_owner = true
layout_mode = 0
offset_right = 1152.0
offset_bottom = 27.0
theme_override_styles/background = SubResource("StyleBoxFlat_7o18k")
theme_override_styles/fill = SubResource("StyleBoxFlat_jf04g")
show_percentage = false

[node name="Level" type="Label" parent="CanvasLayer/Control/ExperienceBar"]
unique_name_in_owner = true
layout_mode = 0
offset_right = 128.0
offset_bottom = 27.0
text = "Level:1"
vertical_alignment = 1
